service: xadrez-backend

frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: python3.7

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    AUTH0_DOMAIN: dev-embzl7vs.auth0.com
    AUTH0_CLIENT_ID: brSV94G2uZANc2lmTtZYXUmci2pTdx1H
    AUTH0_JWKS_URL: https://${self:provider.environment.AUTH0_DOMAIN}/.well-known/jwks.json
    CONNECTIONS_TABLE: Connections-${self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

plugins:
  - serverless-python-requirements
  - serverless-offline

custom:
  pythonRequirements:
    dockerizePip: true
    noDeploy: []
  serverless-offline:
    port: 5000

functions:
  connect:
    handler: src/lambda/websocket/connect.handler
    events:
      - websocket:
          route: $connect

  disconnect:
    handler: src/lambda/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect

  default:
    handler: src/lambda/websocket/default.handler
    events:
      - websocket:
          route: $default

  GetPlayers:
    handler: src/lambda/http/getPlayers.handler
    events:
      - http:
          method: get
          path: players
          cors: true

resources:
  Resources:
    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
