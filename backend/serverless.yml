service: xadrez-backend

frameworkVersion: '>=1.28.0 <2.0.0'

package:
  exclude:
    - ./**
  include:
    - ./src/**

provider:
  name: aws
  runtime: python3.7

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  websocketsApiName: ${self:service}-${self:provider.stage}-websocketApi

  tracing:
    lambda: true
    apiGateway: true

  environment:
    AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
    AUTH0_CLIENT_ID: ${env:AUTH0_CLIENT_ID}
    AUTH0_JWKS_URL: https://${self:provider.environment.AUTH0_DOMAIN}/.well-known/jwks.json
    PLAYERS_TABLE: Players-${self:provider.stage}
    GAMES_TABLE: Games-${self:provider.stage}
    CHAT_ROOM_MESSAGES_TABLE: ChatRoomMessages-${self:provider.stage}
    CONNECTION_ID_INDEX: ConnectionIdIndex
    WEBSOCKET_API_ENDPOINT: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.', "${self:provider.region}", '.amazonaws.com/', "${self:provider.stage}/"]]

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PLAYERS_TABLE}

    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PLAYERS_TABLE}/index/${self:provider.environment.CONNECTION_ID_INDEX}

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GAMES_TABLE}

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CHAT_ROOM_MESSAGES_TABLE}

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-local
  - serverless-offline

custom:
  pythonRequirements:
    useDownloadCache: true
    useStaticCache: true
    dockerizePip: true
    slim: true
  serverless-offline:
    port: 5000
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

functions:
  auth:
    handler: src/lambdas/auth/auth0.handler
    cors: true

  connect:
    handler: src/lambdas/websocket/connect.handler
    events:
      - websocket:
          authorizer:
            name: auth
            type: request
            identitySource:
              - route.request.querystring.token
          route: $connect

  disconnect:
    handler: src/lambdas/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect

  default:
    handler: src/lambdas/websocket/default.handler
    events:
      - websocket:
          route: $default

  createGame:
    handler: src/lambdas/websocket/createGame.handler
    events:
      - websocket:
          route: createGame

  acceptGame:
    handler: src/lambdas/websocket/acceptGame.handler
    events:
      - websocket:
          route: acceptGame

  rejectGame:
    handler: src/lambdas/websocket/rejectGame.handler
    events:
      - websocket:
          route: rejectGame

  movePiece:
    handler: src/lambdas/websocket/movePiece.handler
    events:
      - websocket:
          route: movePiece

  leaveGame:
    handler: src/lambdas/websocket/leaveGame.handler
    events:
      - websocket:
          route: leaveGame

  sendMessage:
    handler: src/lambdas/websocket/sendMessage.handler
    events:
      - websocket:
          route: sendMessage

  getPlayers:
    handler: src/lambdas/http/getPlayers.handler
    events:
      - http:
          method: get
          path: players
          authorizer: auth
          cors: true

  getPlayer:
    handler: src/lambdas/http/getPlayer.handler
    events:
      - http:
          method: get
          path: players/{id}
          authorizer: auth
          cors: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    PlayersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: connection_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.PLAYERS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.CONNECTION_ID_INDEX}
            KeySchema:
            - AttributeName: connection_id
              KeyType: HASH
            Projection:
              ProjectionType: ALL

    GamesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.GAMES_TABLE}

    ChatRoomMessagesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: roomId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: roomId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CHAT_ROOM_MESSAGES_TABLE}
